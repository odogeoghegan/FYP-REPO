generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  signupDate    DateTime      @default(now())
  image         String?
  accounts      Account[]
  followings    Follower[]    @relation("UserFollowing")
  followers     Follower[]    @relation("UserFollower")
  posts         Post[]
  comments      PostComment[]
  likes         PostLike[]
  sessions      Session[]
}

model Post {
  id          String        @id @default(cuid())
  caption     String
  description String?
  images      String[]
  authorId    String
  createdAt   DateTime      @default(now())
  author      User          @relation(fields: [authorId], references: [id])
  comments    PostComment[]
  likes       PostLike[]
  recipe      Recipe?
}

model Recipe {
  id          String  @id @default(cuid())
  postId      String  @unique
  ingredients String[]
  steps       String[]
  post        Post    @relation(fields: [postId], references: [id])
}

model PostLike {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model PostComment {
  id        String   @id @default(cuid())
  postId    String
  comment   String
  authorId  String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  POST      Post     @relation(fields: [postId], references: [id])
}

model Follower {
  id         String   @id @default(cuid())
  userId     String
  followerId String
  createdAt  DateTime @default(now())
  follower   User     @relation("UserFollowing", fields: [followerId], references: [id])
  user       User     @relation("UserFollower", fields: [userId], references: [id])
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  message   String   @db.VarChar(100)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
